syntax = "proto3";

import "cirq/api/google/v1/operations.proto";
import "cirq/api/google/v1/params.proto";

package cirq.api.google.v1;

option java_package = "com.google.cirq.api.google.v1";
option java_outer_classname = "HardwareProto";
option java_multiple_files = true;

// The operations supported by the hardware and the current performance
// characteristics of these operations.
message HardwareSpec {
  // The version name of the hardware.
  //
  // Currently supports: `bristlecone`.
  string processor_name = 1;

  // The supported operations on the hardware. This information is static
  // and does not change for a given processor_name.
  GateSet gate_set = 2;

  // The expected performance characteristics of the hardware at a particular
  // snapshot in time.
  Performance performance = 3;
}

// Gate prototypes, representing a gate that can be applied to specific qubits.
message Prototype {
  // A prototype is a gate plus the qubits upon which the gate acts.
  //
  // If the gate supports parameterized gates, then the parameterized floats
  // will have string keys that can be mapped to accuracies and float ranges
  // (see `parameter_ranges` in `GateSet`.)
  //
  // There is a prototype for every qubits upon which the gate can act.
  //
  // Some of the prototype operation fields will not be set. These include
  // the `key` and `invert_mask` on measurement gates, and
  // `incremental_delay_picoseconds` on all operations
  Operation operation = 1;

  // The resolution with which the gate can be offset (values of
  // `incremental_delay_picoseconds` will be rounded to values in increments
  // of this size).
  uint64 timing_resolution_picoseconds = 2;
}

// The range that a parameter can take along with the accuracy with which
// the parameter can be supplied.
message ParameterRange {
  // The lowest allowed value for the parameter.
  float lower = 1;

  // The highest allowed value for the parameter.
  float upper = 2;

  // The accuracy supported by the hardware for the parameter. Note that this
  // accuracy may be different than the actual gate fidelity of this gate,
  // this is just the practical limit that the hardware can support. Parameter
  // a rounded to ticks of this step size starting from the lower limit
  // specified above.
  float step_size = 3;
}

// The supported operations on the hardware.
message GateSet {
  // Prototypes of the gate, including the qubits upon which the gate acts,
  // and timing resolution. There is a prototype for every general gate
  // that can be applied to specific qubits on the device (i.e. every single
  // qubit gate on every qubit will have a prototype, and similar for every
  // two qubit gate.)
  repeated Prototype prototypes = 1;

  // For the parameterized float keys in prototypes, a map to the parameter
  // ranges describing allowed parameter values and accuracies.  Note that
  // multiple prototypes may have the same key and hence have the same
  // parameter range.
  map<string, ParameterRange> parameter_ranges = 2;
}

// The results of a randomized benchmarking protocol over a set of qubits.
message RandomizedBenchmarking {
  // The qubits over which the randomized benchmarking has been run.
  repeated Qubit qubits = 1;

  // This is one minus the average gate fidelity as reported by the
  // randomized benchmarking protocol.
  float average_gate_error = 2;
}

// A simple representation of measurement errors on single qubits.
message MeasurementError {
  // Which qubit is being characterized.
  Qubit qubit = 1;

  // The probability that a given measurement values is incorrect.
  map<bool, float> error = 2;
}

// A snapshot of the performance of the hardware.
message Performance {
  // The time at which the performance was measured, in micros since epoch.
  uint64 update_time_micros = 1;

  // Characterization of the performance of the unitary gates on particular
  // qubits according to a randomized benchmarking protocol.
  repeated RandomizedBenchmarking randomized_benchmarking = 2;

  // Characterization of the errors in performing measurements on
  // particular qubits.
  repeated MeasurementError measurement_error = 3;
}
