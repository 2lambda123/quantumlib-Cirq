syntax = "proto3";

import "cirq/api/google/v2/run_context.proto";

package cirq.api.google.v2;

option java_package = "com.google.cirq.api.google.v2";
option java_outer_classname = "ProgramProto";
option java_multiple_files = true;

// A quantum program.
message Program {
  // The language in which the program is written.
  Language language = 1;

  // Details of how the program should be scheduled.
  Scheduling scheduling = 2;

  // The quantum circuit, specified as a list of operations.
  repeated Operation operations = 2;
}

// The language in which the program is expressed.
message Language {
  // The name of the gate set being used.
  string gate_set = 1;

  // The language supported by ArgFunctions.
  string arg_function_language = 2;
}

enum SchedulingType {
  // The scheduling type is unspecified.
  SCHEDULING_TYPE_UNSPECIFIED = 0;

  // Scheduling should rely on the start time field being set in every
  // operation.
  //
  // If this is used, moment_index is ignored.
  START_TIME = 1;

  // With a moment every gate is executed as early as possible. The duration
  // of a moment is the length of the longest gate in that moment.
  //
  // If this is used, start_time_picos is ignored.
  START_ALIGNED_MOMENTS = 2;

  // All operations are scheduled to happen as early as possible. This is
  // greedily determined passing over the operations in the order they
  // are specified in Program.
  //
  // If this is used, start_time_picos and moment_index are both ignored.
  EARLIEST = 3;
}

// Details of how the circuit is scheduled on to the device.
message Scheduling {
  // What type of scheduling is used.
  SchedulingType type = 1;
}

// An operation acts on a set of qubits.
message Operation {
  // Which gate this operation corresponds to.
  Gate gate = 1;

  // Arguments needed to fully specify the gate.
  repeated Arg args = 2;

  // Which qubits the operation acts on.
  repeated Qubit qubits = 3;

  // If the operation produces results, these are referenced by these keys.
  repeated string keys = 4;

  // The start time of the operation, with zero representing the absolute
  // start of the circuit.
  //
  // Must be set if START_TIME scheduling is used.
  int64 start_time_picos = 5;

  // Which moment this operation belongs to. A moment is a collection of
  // operations that are conceptually associated with the same time slice.
  // This index is which integer time slice this is associated with.
  //
  // Must be set if START_ALIGNED_MOMENT scheduling is used.
  int32 moment_index = 6;
}

// The instruction identifying the action taken on the quantum computer.
message Gate {
  string id = 1;
}

// An identifier for a qubit.
message Qubit {
  string id = 2;
}

// Arguments needed to specify a gate.
message Arg {

  // Arguments are either a number, a symbol, or an argument function
  // (which recursively depends on Arg).
  //
  // Number is used to specify an argument that does not vary depending on
  // RunContext.
  //
  // Symbol is used when an argument will be resolved (supplied a value)
  // by a Run Context.
  //
  // Functions are used to define a simple s-expression tree describing
  // how to combine numbers and symbols mathematically.
  oneof arg {
    float number = 1;
    string symbol = 2;
    ArgFunction func = 3;
  }
}

// A function of arguments. This is an s-expression tree representing
// mathematically the function being evaluated.
//
// What language is supported is specified by the arg_function_language
// in the language message.
message ArgFunction {
  // The name of the function.
  string type = 1;

  // The arguments to the function.
  repeated Arg args = 2;
}
