syntax = "proto3";

package cirq.api.google.v2;

option java_package = "com.google.cirq.api.google.v2";
option java_outer_classname = "DeviceProto";
option java_multiple_files = true;

// This contains information about a device that includes the
// qubits on the device, supported gates, connections, and timing.
// This message specifies information that is needed when sending a
// Program message to the device.
message DeviceSpecification {

  // A list of allowed gatesets for programs submitted to this processor
  // Language.gate_set should be one of these values to be valid.
  repeated GateSet valid_gate_sets = 1;

  // A list of allowed ids for qubits within the Program.
  // Any programs with ids not in this list will be rejected.
  // If empty, all qubit values are allowed (e.g. in a simulator)
  repeated string valid_qubits = 2;

  // A list of targets that gates can use.
  repeated TargetList valid_targets = 3;

  // Additional recommendations, caveats, and soft requirements that
  // are advice to users of the device, specified in English text
  // For instance, "All Z gates are converted to VirtualZ gates".
  string developer_recommendations = 4;
}

message GateSet {
   // The name of the gate set corresponding to Language.gate_set
   string name = 1;

   // A list of valid gates permitted by this gate set
   repeated GateDefinition valid_gates = 2;
}

message GateDefinition {
  // The name for the gate.  This must match the Gate.id in your program.
  string id = 1;

  // If unset or set to zero, any number of qubits is allowed.
  int32 number_of_qubits = 2;

  // The name of the arguments that should be specified for
  // an operation of this gate
  repeated ArgDefinition valid_args = 3;

  // This defines the approximate amount of time for each gate,
  // specified as an integer number of picoseconds.
  int64 gate_duration_picos = 4;

  // Valid targets that this gate can use.
  // Values in this list correspond to the name of the TargetList
  // If unset, all combinations using the number of qubits are allowed.
  repeated string valid_targets = 5;
}

// A description of an argument to an operation.
message ArgDefinition {

    enum ArgType {
       UNSPECIFIED = 0;
       FLOAT = 1;
       REPEATED_BOOLEAN = 2;
       STRING = 3;
    }

    // The name of the argument
    // This corresponds to the valid key values for the
    // map value of Operation.args
    string name = 1;

    // The type of the argument.
    // This should correspond to the legal assignment
    // of the Arg.arg oneof for this argument
    ArgType type = 2;

    // This should only be populated for type FLOAT.
    // If not set, all float values are allowed.
    repeated ArgumentRange allowed_ranges =3;
}

// Minimum value is inclusive and maximum value is exclusive.
// If minimum and maximum values are the same, only a single value is allowed.
message ArgumentRange {
  float minimum_value = 1;
  float maximum_value = 2;
}

// A list of targets that are valid for a set of gates.
// For instance, all qubit pairs that can be acted on by a 2-qubit gate
message TargetList {
  // The name of the target list.
  // This will be referenced in the GateDefintion to denote
  // which targets are valid.
  string name = 1;

  // If set to true, any order of the targets is valid.
  // If false, then the order of the targets matters and must match the order in
  // the targets list.
  bool is_symmetric = 2;

  // A list of targets that are valid
  repeated Target targets = 3;
}


// A description of a valid target of a multi-qubit gate operation
// For most Google devices, this will be a pair of qubit ids.
message Target {
  // A list of qubit ids that form a valid gate target.
  repeated string ids = 1;
}

