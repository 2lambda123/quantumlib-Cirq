# Copyright 2018 The Cirq Developers
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import itertools

import pytest

import cirq
import cirq.testing as ct
import cirq.contrib.acquaintance as cca


def test_quartic_bipartite_acquaintance_bad_args():
    a, b, c, d, e = cirq.LineQubit.range(5)
    bad_qubit_sets = (
            [(a,), (b,)],
            [(a,), (b, c)],
            [(a,), (b, c, d)],
            [(a, b, c), (d,)],
            [(a, b, c), (c, d, e)],
            [(a, b, c), (a,)])
    for qubit_sets in bad_qubit_sets:
        with pytest.raises(ValueError):
            cca.quartic_bipartite_acquaintance_strategy(*qubit_sets)


@pytest.mark.parametrize('qubit_set_sizes',
        itertools.product(range(2, 6), repeat=2))
def test_quartic_bipartite_acquaintance_ops(qubit_set_sizes):
    n_qubits = sum(qubit_set_sizes)
    qubits = cirq.LineQubit.range(n_qubits)
    qubit_sets = (qubits[:qubit_set_sizes[0]],
                  qubits[-qubit_set_sizes[1]:])

    strategy = cca.quartic_bipartite_acquaintance_strategy(*qubit_sets)

    initial_mapping = {q: i for i, q in enumerate(qubits)}
    all_ops = cca.get_logical_acquaintance_opportunities(
        strategy, initial_mapping)
    quartic_ops = set(op for op in all_ops if len(op) == 4)

    index_sets = tuple(tuple(q.x for q in qubit_set)
                       for qubit_set in qubit_sets)
    pair_sets = (itertools.combinations(index_set, 2)
                 for index_set in index_sets)
    expected_ops = itertools.starmap(
            itertools.chain, itertools.product(*pair_sets))
    assert quartic_ops >= set(frozenset(s) for s in expected_ops)


def test_quartic_bipartite_diagrams():
    qubit_sets = (cirq.LineQubit.range(3), cirq.LineQubit.range(3, 7))
    strategy = cca.quartic_bipartite_acquaintance_strategy(*qubit_sets)
    expected_diagram = """
0: ───×(0,0)───1↦0───×(0,0)─────────×(0,0)───1↦0───×(0,0)───0↦1───×(0,0)───1↦0───×(0,0)─────────×(0,0)───1↦0───×(0,0)─────────×(0,0)───1↦0───×(0,0)─────────×(0,0)───1↦0───×(0,0)───0↦1───
      │        │     │              │        │     │        │     │        │     │              │        │     │              │        │     │              │        │     │        │
1: ───×(0,1)───0↦1───×(1,0)─────────×(0,1)───0↦1───×(1,0)───1↦0───×(1,0)───0↦1───×(1,0)─────────×(1,0)───0↦1───×(1,0)───0↦1───×(0,1)───0↦1───×(1,0)─────────×(0,1)───0↦1───×(1,0)───1↦0───
      │              │              │              │              │              │              │              │        │     │              │              │              │
2: ───×(1,0)───1↦0───×(1,1)─────────×(1,0)───1↦0───×(1,1)─────────×(1,1)───1↦0───×(1,1)─────────×(1,1)───1↦0───×(1,1)───1↦0───×(1,0)───1↦0───×(1,1)─────────×(1,0)───1↦0───×(1,1)─────────
      │        │     │              │        │     │              │        │     │              │        │     │              │        │     │              │        │     │
3: ───×(2,0)───0↦1───×(2,0)─────────×(2,0)───0↦1───×(2,0)─────────×(2,0)───0↦1───×(2,0)─────────×(2,0)───0↦1───×(2,0)─────────×(2,0)───0↦1───×(2,0)─────────×(2,0)───0↦1───×(2,0)─────────
      │              │              │              │              │              │              │              │              │              │              │              │
4: ───×(2,1)─────────×(3,0)───0↦1───×(2,1)─────────×(3,0)───0↦1───×(2,1)─────────×(3,0)───0↦1───×(2,1)─────────×(3,0)───0↦1───×(2,1)─────────×(3,0)───0↦1───×(2,1)─────────×(3,0)───0↦1───
      │              │        │     │              │        │     │              │        │     │              │        │     │              │        │     │              │        │
5: ───×(3,0)─────────×(4,0)───1↦0───×(3,0)─────────×(4,0)───1↦0───×(3,0)─────────×(3,1)───1↦0───×(3,0)─────────×(3,1)───1↦0───×(3,0)─────────×(4,0)───1↦0───×(3,0)─────────×(4,0)───1↦0───
      │              │              │              │              │              │              │              │              │              │              │              │
6: ───×(3,1)─────────×(4,1)─────────×(3,1)─────────×(4,1)─────────×(3,1)─────────×(4,0)─────────×(3,1)─────────×(4,0)─────────×(3,1)─────────×(4,1)─────────×(3,1)─────────×(4,1)─────────
""".strip()
    ct.assert_has_diagram(strategy, expected_diagram)

    qubit_sets = (cirq.LineQubit.range(3), cirq.LineQubit.range(3, 7))
    strategy = cca.quartic_bipartite_acquaintance_strategy(
            *qubit_sets, acquainter=(lambda _: None))
    expected_diagram = """
0: ───█─────────█─────────█─────────█───0↦1───────────────────────────────────────────█─────────█─────────█─────────█───0↦1───
      │         │         │         │   │                                             │         │         │         │   │
1: ───█─────────█─────────█─────────█───1↦0───█─────────█─────────█─────────█───0↦1───█─────────█─────────█─────────█───1↦0───
                                              │         │         │         │   │
2: ───────────────────────────────────────────█─────────█─────────█─────────█───1↦0───────────────────────────────────────────

3: ───█───0↦1─────────────█───0↦1─────────────█───0↦1─────────────█───0↦1─────────────█───0↦1─────────────█───0↦1─────────────
      │   │               │   │               │   │               │   │               │   │               │   │
4: ───█───1↦0───█───0↦1───█───1↦0───█───0↦1───█───1↦0───█───0↦1───█───1↦0───█───0↦1───█───1↦0───█───0↦1───█───1↦0───█───0↦1───
                │   │               │   │               │   │               │   │               │   │               │   │
5: ───█───0↦1───█───1↦0───█───0↦1───█───1↦0───█───0↦1───█───1↦0───█───0↦1───█───1↦0───█───0↦1───█───1↦0───█───0↦1───█───1↦0───
      │   │               │   │               │   │               │   │               │   │               │   │
6: ───█───1↦0─────────────█───1↦0─────────────█───1↦0─────────────█───1↦0─────────────█───1↦0─────────────█───1↦0─────────────
    """.strip()
    ct.assert_has_diagram(strategy, expected_diagram)

    qubit_sets = (cirq.LineQubit.range(4), cirq.LineQubit.range(4, 7))
    strategy = cca.quartic_bipartite_acquaintance_strategy(*qubit_sets)
    expected_diagram = """
0: ───×(0,0)─────────×(0,0)─────────×(0,0)─────────×(0,0)─────────×(0,0)───1↦0───×(0,0)─────────×(0,0)─────────×(0,0)─────────×(0,0)─────────×(0,0)─────────×(0,0)───1↦0───×(0,0)─────────
      │              │              │              │              │        │     │              │              │              │              │              │        │     │
1: ───×(0,1)───1↦0───×(0,1)─────────×(0,1)───1↦0───×(1,0)─────────×(1,0)───0↦1───×(1,0)───0↦1───×(0,1)───1↦0───×(0,1)─────────×(0,1)───1↦0───×(1,0)─────────×(1,0)───0↦1───×(1,0)───0↦1───
      │        │     │              │        │     │              │              │        │     │        │     │              │        │     │              │              │        │
2: ───×(1,0)───0↦1───×(1,0)─────────×(1,0)───0↦1───×(1,1)─────────×(1,1)─────────×(1,1)───1↦0───×(1,0)───0↦1───×(1,0)─────────×(1,0)───0↦1───×(1,1)─────────×(1,1)─────────×(1,1)───1↦0───
      │              │              │              │              │              │              │              │              │              │              │              │
3: ───×(1,1)─────────×(2,0)─────────×(1,1)───1↦0───×(2,0)─────────×(2,0)─────────×(2,0)─────────×(1,1)─────────×(2,0)─────────×(1,1)───1↦0───×(2,0)─────────×(2,0)─────────×(2,0)─────────
      │              │              │        │     │              │              │              │              │              │        │     │              │              │
4: ───×(2,0)─────────×(2,1)─────────×(2,0)───0↦1───×(3,0)───0↦1───×(3,0)─────────×(3,0)───0↦1───×(2,0)─────────×(2,1)─────────×(2,0)───0↦1───×(3,0)───0↦1───×(3,0)─────────×(3,0)───0↦1───
      │              │              │              │        │     │              │        │     │              │              │              │        │     │              │        │
5: ───×(2,1)─────────×(3,0)───0↦1───×(2,1)───1↦0───×(3,1)───1↦0───×(4,0)─────────×(3,1)───1↦0───×(2,1)─────────×(3,0)───0↦1───×(2,1)───1↦0───×(3,1)───1↦0───×(4,0)─────────×(3,1)───1↦0───
      │              │        │     │        │     │              │              │              │              │        │     │        │     │              │              │
6: ───×(3,0)─────────×(3,1)───1↦0───×(3,0)───0↦1───×(4,0)─────────×(4,1)─────────×(4,0)─────────×(3,0)─────────×(3,1)───1↦0───×(3,0)───0↦1───×(4,0)─────────×(4,1)─────────×(4,0)─────────
    """.strip()
    ct.assert_has_diagram(strategy, expected_diagram)

    qubit_sets = (cirq.LineQubit.range(4), cirq.LineQubit.range(4, 7))
    strategy = cca.quartic_bipartite_acquaintance_strategy(
            *qubit_sets, acquainter=(lambda _: None))
    expected_diagram = """
0: ───█─────────█─────────█───0↦1─────────────────────────────────█─────────█─────────█───0↦1─────────────────────────────────
      │         │         │   │                                   │         │         │   │
1: ───█─────────█─────────█───1↦0───█─────────█─────────█───0↦1───█─────────█─────────█───1↦0───█─────────█─────────█───0↦1───
                                    │         │         │   │                                   │         │         │   │
2: ───█─────────█─────────█───0↦1───█─────────█─────────█───1↦0───█─────────█─────────█───0↦1───█─────────█─────────█───1↦0───
      │         │         │   │                                   │         │         │   │
3: ───█─────────█─────────█───1↦0─────────────────────────────────█─────────█─────────█───1↦0─────────────────────────────────

4: ───█───0↦1─────────────█───0↦1───█───0↦1─────────────█───0↦1───█───0↦1─────────────█───0↦1───█───0↦1─────────────█───0↦1───
      │   │               │   │     │   │               │   │     │   │               │   │     │   │               │   │
5: ───█───1↦0───█───0↦1───█───1↦0───█───1↦0───█───0↦1───█───1↦0───█───1↦0───█───0↦1───█───1↦0───█───1↦0───█───0↦1───█───1↦0───
                │   │                         │   │                         │   │                         │   │
6: ─────────────█───1↦0───────────────────────█───1↦0───────────────────────█───1↦0───────────────────────█───1↦0─────────────
""".strip()
    ct.assert_has_diagram(strategy, expected_diagram)
