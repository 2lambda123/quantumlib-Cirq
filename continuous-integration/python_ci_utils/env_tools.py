# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
from typing import List, Optional, TypeVar, Iterable, Callable

import os
import shutil

from dev_tools import shell_tools, git_env_tools
from dev_tools.github_repository import GithubRepository
from dev_tools.prepared_env import PreparedEnv

BOLD = 1
DIM = 2
RED = 31
GREEN = 32
YELLOW = 33
TResult = TypeVar('TResult')


def highlight(text: str, color_code: int, bold: bool=False) -> str:
    """Wraps the given string with terminal color codes.

    Args:
        text: The content to highlight.
        color_code: The color to highlight with, e.g. 'shelltools.RED'.
        bold: Whether to bold the content in addition to coloring.

    Returns:
        The highlighted string.
    """
    return '{}\033[{}m{}\033[0m'.format(
        '\033[1m' if bold else '',
        color_code,
        text,)


def py_files(files: List[str]) -> List[str]:
    """Filter a list of filenames to include non-autogenerated python files."""
    return [f
            for f in files
            if f.endswith('.py') and not f.endswith('_pb2.py')]


def get_unhidden_ungenerated_python_files(directory) -> Iterable[str]:
    """Iterates through relevant python files within the given directory.

    Args:
        directory: The top-level directory to explore.

    Yields:
        File paths.
    """
    for dirpath, dirnames, filenames in os.walk(directory, topdown=True):
        if os.path.split(dirpath)[-1].startswith('.'):
            dirnames.clear()
            continue

        for filename in filenames:
            path = os.path.join(dirpath, filename)
            if path.endswith('.py') and not path.endswith('_pb2.py'):
                yield path


def create_virtual_env(python_path, env_path):
    shell_tools.run_cmd('virtualenv', '-p', python_path, env_path,
                        out=sys.stderr)
    pip_path = os.path.join(env_path, 'bin', 'pip')
    shell_tools.run_cmd(pip_path, 'install', '-r', 'requirements.txt',
                        out=sys.stderr)


def prepare_temporary_test_environment(
        destination_directory: str,
        repository: GithubRepository,
        pull_request_number: Optional[int],
        env_name: str = '.test_virtualenv',
        python_path: str = '/usr/bin/python3.5',
        commit_ids_known_callback: Callable[[PreparedEnv], None] = None
) -> PreparedEnv:
    """Prepares a temporary test environment at the (existing empty) directory.

    Args:
        destination_directory: The location to put files. The caller is
            responsible for deleting the directory, whether or not this method
             succeeds or fails.
        repository: The github repository to download content from, if a pull
            request number is given.
        pull_request_number: If set, test content is fetched from github.
            Otherwise copies of local files are used.
        env_name: The name to use for the virtual environment.
        python_path: Location of the python binary to use within the
            virtual environment.
        commit_ids_known_callback: A method to call when the actual commit id
            being tested is known, before the virtual environment is ready.

    Returns:
        Commit ids corresponding to content to test/compare.
    """
    # Fetch content.
    if pull_request_number is not None:
        env = git_env_tools.fetch_github_pull_request(
            destination_directory=destination_directory,
            repository=repository,
            pull_request_number=pull_request_number)
    else:
        env = git_env_tools.fetch_local_files(
            destination_directory=destination_directory)

    if commit_ids_known_callback is not None:
        commit_ids_known_callback(env)

    # Create virtual environment.
    env_path = os.path.join(env.destination_directory, env_name)
    create_virtual_env(env_path=env_path,
                       python_path=python_path)

    return PreparedEnv(repository=env.repository,
                       actual_commit_id=env.actual_commit_id,
                       compare_commit_id=env.compare_commit_id,
                       destination_directory=env.destination_directory,
                       virtual_env_path=env_path)


def derive_temporary_python2_environment(
        destination_directory: str,
        python3_environment: PreparedEnv,
        env_name: str = '.test_virtualenv_py2',
        python_path: str = "/usr/bin/python2.7") -> PreparedEnv:

    shutil.rmtree(destination_directory)
    os.chdir(python3_environment.destination_directory)
    input_directory = python3_environment.destination_directory
    conversion_script_path = os.path.join(
        python3_environment.destination_directory,
        'python2.7-generate.sh')
    shell_tools.run_cmd('bash',
                        conversion_script_path,
                        destination_directory,
                        input_directory,
                        out=sys.stderr)
    os.chdir(destination_directory)

    # Create virtual environment.
    env_path = os.path.join(destination_directory, env_name)
    create_virtual_env(env_path=env_path, python_path=python_path)

    return PreparedEnv(repository=python3_environment.repository,
                       actual_commit_id=python3_environment.actual_commit_id,
                       compare_commit_id=python3_environment.compare_commit_id,
                       destination_directory=destination_directory,
                       virtual_env_path=env_path)
