# Copyright 2021 The Cirq Developers
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from dataclasses import dataclass, field
from typing import TYPE_CHECKING, Dict, List, Optional, Sequence

from cirq import devices, ops
from cirq.devices.noise_utils import (
    OpIdentifier,
    PHYSICAL_GATE_TAG,
)

if TYPE_CHECKING:
    import cirq


@dataclass
class InsertionNoiseModel(devices.NoiseModel):
    """Simple base noise model for inserting operations.

    Operations generated by this model for a given moment are all added into a
    single "noise moment", which is added before or after the original moment
    based on `prepend`.

    Args:
        ops_added: a map of gate types (and optionally, qubits they act on) to
            operations that should be added.
        prepend: whether to add the new moment before the current one.
        require_physical_tag: whether to only apply noise to operations tagged
            with PHYSICAL_GATE_TAG.
    """

    ops_added: Dict[OpIdentifier, 'cirq.Operation'] = field(default_factory=dict)
    prepend: bool = False
    require_physical_tag: bool = True

    def noisy_moment(
        self, moment: 'cirq.Moment', system_qubits: Sequence['cirq.Qid']
    ) -> 'cirq.OP_TREE':
        noise_ops: List['cirq.Operation'] = []
        for op in moment:
            if self.require_physical_tag and PHYSICAL_GATE_TAG not in op.tags:
                # Only non-virtual gates get noise applied.
                continue
            match_id: Optional[OpIdentifier] = None
            for op_id in self.ops_added:
                if op not in op_id:
                    continue
                elif match_id is None:
                    match_id = op_id
                    continue
                elif op_id.is_proper_subtype_of(match_id):
                    match_id = op_id
            if match_id is not None:
                noise_ops.append(self.ops_added[match_id])
        if not noise_ops:
            return [moment]
        if self.prepend:
            return [ops.Moment(noise_ops), moment]
        return [moment, ops.Moment(noise_ops)]
