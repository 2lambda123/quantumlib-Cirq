from dataclasses import dataclass, field
from typing import TYPE_CHECKING, Dict, List, Sequence

from cirq import devices, ops
from cirq.devices.noise_utils import (
    OpIdentifier,
    PHYSICAL_GATE_TAG,
)

if TYPE_CHECKING:
    import cirq


@dataclass
class InsertionNoiseModel(devices.NoiseModel):
    """Simple base noise model for inserting operations.

    Operations generated by this model for a given moment are all added into a
    single "noise moment", which is added before or after the original moment
    based on `prepend`.

    Args:
        ops_added: a map of gate types (and optionally, qubits they act on) to
            operations that should be added.
        prepend: whether to add the new moment before the current one.
        require_physical_tag: whether to only apply noise to operations tagged
            with PHYSICAL_GATE_TAG.
    """

    ops_added: Dict[OpIdentifier, 'cirq.Operation'] = field(default_factory=dict)
    prepend: bool = False
    require_physical_tag: bool = True

    def noisy_moment(
        self, moment: 'cirq.Moment', system_qubits: Sequence['cirq.Qid']
    ) -> 'cirq.OP_TREE':
        noise_ops: List['cirq.Operation'] = []
        for op in moment:
            if self.require_physical_tag and PHYSICAL_GATE_TAG not in op.tags:
                # Only non-virtual gates get noise applied.
                continue
            op_id = OpIdentifier(type(op.gate), *op.qubits)
            if op_id in self.ops_added:
                noise_ops.append(self.ops_added[op_id])
                continue
            # Find the closest match, if one exists.
            parent_id = OpIdentifier(object, *op.qubits)
            for added_id in self.ops_added:
                if added_id.qubits != parent_id.qubits:
                    continue
                if not issubclass(op_id.gate_type, added_id.gate_type):
                    continue
                if issubclass(added_id.gate_type, parent_id.gate_type):
                    parent_id = added_id
            if parent_id.gate_type != object:
                noise_ops.append(self.ops_added[parent_id])
        if not noise_ops:
            return [moment]
        if self.prepend:
            return [ops.Moment(noise_ops), moment]
        return [moment, ops.Moment(noise_ops)]
