"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

# Specifies how to repeatedly sample a circuit, with or without sweeping over
# varying parameter-dicts.
class ParameterSweep(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    REPETITIONS_FIELD_NUMBER: builtins.int
    SWEEP_FIELD_NUMBER: builtins.int
    # How many times to sample, for each parameter-dict that is swept over.
    # This must be set to a value strictly greater than zero.
    repetitions: builtins.int = ...
    # Which parameters, that control gates in the circuit, to try.
    #
    # The keys of the parameters generated by this sweep must be a superset
    # of the keys in the program's operations.  When this is not specified,
    # no parameterization is assumed (and the program must have no
    # ParameterizedFloat's with keys.
    @property
    def sweep(self) -> global___ProductSweep: ...
    def __init__(self,
        *,
        repetitions : builtins.int = ...,
        sweep : typing.Optional[global___ProductSweep] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"sweep",b"sweep"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"repetitions",b"repetitions",u"sweep",b"sweep"]) -> None: ...
global___ParameterSweep = ParameterSweep

# A cartesian product of parameter sweeps.
class ProductSweep(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FACTORS_FIELD_NUMBER: builtins.int
    # A list of parameter sweeps to combine into a cartesian sweep.
    #
    # Example: if one of the factors assigns
    # "a": 0.0
    # "a": 1.0
    # and another assigns
    # "b": 2.0
    # "b": 3.0
    # then the product of these assigns
    # "a": 0.0, "b": 2.0
    # "a": 0.0, "b": 3.0
    # "a": 1.0, "b": 2.0
    # "a": 1.0, "b": 3.0
    @property
    def factors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ZipSweep]: ...
    def __init__(self,
        *,
        factors : typing.Optional[typing.Iterable[global___ZipSweep]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"factors",b"factors"]) -> None: ...
global___ProductSweep = ProductSweep

# A pairwise-joining of parameter sweeps.
class ZipSweep(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SWEEPS_FIELD_NUMBER: builtins.int
    # Note: if one sweep is shorter, the others will be truncated.
    #
    # Example: if one of the factors assigns
    # "a": 0.0
    # "a": 1.0
    # and another assigns
    # "b": 2.0
    # "b": 3.0
    # then the product of these assigns
    # "a": 0.0, "b": 2.0
    # "a": 1.0, "b": 3.0
    @property
    def sweeps(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SingleSweep]: ...
    def __init__(self,
        *,
        sweeps : typing.Optional[typing.Iterable[global___SingleSweep]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"sweeps",b"sweeps"]) -> None: ...
global___ZipSweep = ZipSweep

# A set of values to try for a particular parameter.
class SingleSweep(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PARAMETER_KEY_FIELD_NUMBER: builtins.int
    POINTS_FIELD_NUMBER: builtins.int
    LINSPACE_FIELD_NUMBER: builtins.int
    # The parameter key being varied. This cannot be the empty string.
    parameter_key: typing.Text = ...
    # An explicit list of points to try.
    @property
    def points(self) -> global___Points: ...
    # Uniformly-spaced sampling over a range.
    @property
    def linspace(self) -> global___Linspace: ...
    def __init__(self,
        *,
        parameter_key : typing.Text = ...,
        points : typing.Optional[global___Points] = ...,
        linspace : typing.Optional[global___Linspace] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"linspace",b"linspace",u"points",b"points",u"sweep",b"sweep"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"linspace",b"linspace",u"parameter_key",b"parameter_key",u"points",b"points",u"sweep",b"sweep"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"sweep",b"sweep"]) -> typing.Optional[typing_extensions.Literal["points","linspace"]]: ...
global___SingleSweep = SingleSweep

# A list of explicit values.
class Points(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    POINTS_FIELD_NUMBER: builtins.int
    # The values.
    @property
    def points(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    def __init__(self,
        *,
        points : typing.Optional[typing.Iterable[builtins.float]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"points",b"points"]) -> None: ...
global___Points = Points

# A range of evenly-spaced values.
#
# Example: if the first_point is 1.0, the last_point is 2.0 ,
# and the num_points is 5, thi corresponds to the points
#   1.0, 1.25, 1.5, 1.75, 2.0
class Linspace(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FIRST_POINT_FIELD_NUMBER: builtins.int
    LAST_POINT_FIELD_NUMBER: builtins.int
    NUM_POINTS_FIELD_NUMBER: builtins.int
    # The start of the range.
    first_point: builtins.float = ...
    # The end of the range.
    last_point: builtins.float = ...
    # The number of points in the range (including first and last). Must be
    # greater than zero. If it is 1, the first_point and last_point must be
    # the same.
    num_points: builtins.int = ...
    def __init__(self,
        *,
        first_point : builtins.float = ...,
        last_point : builtins.float = ...,
        num_points : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"first_point",b"first_point",u"last_point",b"last_point",u"num_points",b"num_points"]) -> None: ...
global___Linspace = Linspace

# A point sampled during a parameter sweep.
class ParameterDict(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class AssignmentsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: builtins.float = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    ASSIGNMENTS_FIELD_NUMBER: builtins.int
    # Maps parameter names to values.
    @property
    def assignments(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, builtins.float]: ...
    def __init__(self,
        *,
        assignments : typing.Optional[typing.Mapping[typing.Text, builtins.float]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"assignments",b"assignments"]) -> None: ...
global___ParameterDict = ParameterDict
