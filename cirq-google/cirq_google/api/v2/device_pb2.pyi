"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class DeviceSpecification(google.protobuf.message.Message):
    """This contains information about a device that includes the
    qubits on the device, supported gates, connections, and timing.
    This message specifies information that is needed when sending a
    Program message to the device.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VALID_GATE_SETS_FIELD_NUMBER: builtins.int
    VALID_GATES_FIELD_NUMBER: builtins.int
    VALID_QUBITS_FIELD_NUMBER: builtins.int
    VALID_TARGETS_FIELD_NUMBER: builtins.int
    DEVELOPER_RECOMMENDATIONS_FIELD_NUMBER: builtins.int
    @property
    def valid_gate_sets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GateSet]:
        """A list of allowed gatesets for programs submitted to this processor
        Language.gate_set should be one of these values to be valid.
        """
        pass
    @property
    def valid_gates(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GateSpecification]:
        """The device gateset.
        Contains the list of gates allowed in programs submitted to this processor.
        """
        pass
    @property
    def valid_qubits(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """A list of allowed ids for qubits within the Program.
        Any programs with ids not in this list will be rejected.
        If empty, all qubit values are allowed (e.g. in a simulator)
        Only grid qubits are supported. Strings must be in the form '<int>_<int>'.
        Single-qubit gates can be applied to all qubits.
        Measurement and wait gates can be applied to all subset of qubits.
        """
        pass
    @property
    def valid_targets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TargetSet]:
        """A list of targets that gates can use."""
        pass
    developer_recommendations: typing.Text = ...
    """Additional recommendations, caveats, and soft requirements that
    are advice to users of the device, specified in English text
    For instance, "All Z gates are converted to VirtualZ gates".
    """

    def __init__(self,
        *,
        valid_gate_sets : typing.Optional[typing.Iterable[global___GateSet]] = ...,
        valid_gates : typing.Optional[typing.Iterable[global___GateSpecification]] = ...,
        valid_qubits : typing.Optional[typing.Iterable[typing.Text]] = ...,
        valid_targets : typing.Optional[typing.Iterable[global___TargetSet]] = ...,
        developer_recommendations : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"developer_recommendations",b"developer_recommendations",u"valid_gate_sets",b"valid_gate_sets",u"valid_gates",b"valid_gates",u"valid_qubits",b"valid_qubits",u"valid_targets",b"valid_targets"]) -> None: ...
global___DeviceSpecification = DeviceSpecification

class GateSpecification(google.protobuf.message.Message):
    """This contains information about a single device gate.
    Replaces `GateDefinition`.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Sycamore(google.protobuf.message.Message):
        """Gate types available to Google devices.
        Future gates may have parameter constraints that are frequently updated.
        In such cases, the gate message will contain additional fields to specify
        those constraints.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    class SqrtISwap(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    class SqrtISwapInv(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    class CZ(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    class PhasedXZ(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    class VirtualZPow(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    class PhysicalZPow(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    class CouplerPulse(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    class Measurement(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    class Wait(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    GATE_DURATION_PICOS_FIELD_NUMBER: builtins.int
    SYC_FIELD_NUMBER: builtins.int
    SQRT_ISWAP_FIELD_NUMBER: builtins.int
    SQRT_ISWAP_INV_FIELD_NUMBER: builtins.int
    CZ_FIELD_NUMBER: builtins.int
    PHASED_XZ_FIELD_NUMBER: builtins.int
    VIRTUAL_ZPOW_FIELD_NUMBER: builtins.int
    PHYSICAL_ZPOW_FIELD_NUMBER: builtins.int
    COUPLER_PULSE_FIELD_NUMBER: builtins.int
    MEAS_FIELD_NUMBER: builtins.int
    WAIT_FIELD_NUMBER: builtins.int
    gate_duration_picos: builtins.int = ...
    """This defines the approximate duration to run the gate on the device,
    specified as an integer number of picoseconds.
    """

    @property
    def syc(self) -> global___GateSpecification.Sycamore: ...
    @property
    def sqrt_iswap(self) -> global___GateSpecification.SqrtISwap: ...
    @property
    def sqrt_iswap_inv(self) -> global___GateSpecification.SqrtISwapInv: ...
    @property
    def cz(self) -> global___GateSpecification.CZ: ...
    @property
    def phased_xz(self) -> global___GateSpecification.PhasedXZ: ...
    @property
    def virtual_zpow(self) -> global___GateSpecification.VirtualZPow: ...
    @property
    def physical_zpow(self) -> global___GateSpecification.PhysicalZPow: ...
    @property
    def coupler_pulse(self) -> global___GateSpecification.CouplerPulse: ...
    @property
    def meas(self) -> global___GateSpecification.Measurement: ...
    @property
    def wait(self) -> global___GateSpecification.Wait: ...
    def __init__(self,
        *,
        gate_duration_picos : builtins.int = ...,
        syc : typing.Optional[global___GateSpecification.Sycamore] = ...,
        sqrt_iswap : typing.Optional[global___GateSpecification.SqrtISwap] = ...,
        sqrt_iswap_inv : typing.Optional[global___GateSpecification.SqrtISwapInv] = ...,
        cz : typing.Optional[global___GateSpecification.CZ] = ...,
        phased_xz : typing.Optional[global___GateSpecification.PhasedXZ] = ...,
        virtual_zpow : typing.Optional[global___GateSpecification.VirtualZPow] = ...,
        physical_zpow : typing.Optional[global___GateSpecification.PhysicalZPow] = ...,
        coupler_pulse : typing.Optional[global___GateSpecification.CouplerPulse] = ...,
        meas : typing.Optional[global___GateSpecification.Measurement] = ...,
        wait : typing.Optional[global___GateSpecification.Wait] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"coupler_pulse",b"coupler_pulse",u"cz",b"cz",u"gate",b"gate",u"meas",b"meas",u"phased_xz",b"phased_xz",u"physical_zpow",b"physical_zpow",u"sqrt_iswap",b"sqrt_iswap",u"sqrt_iswap_inv",b"sqrt_iswap_inv",u"syc",b"syc",u"virtual_zpow",b"virtual_zpow",u"wait",b"wait"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"coupler_pulse",b"coupler_pulse",u"cz",b"cz",u"gate",b"gate",u"gate_duration_picos",b"gate_duration_picos",u"meas",b"meas",u"phased_xz",b"phased_xz",u"physical_zpow",b"physical_zpow",u"sqrt_iswap",b"sqrt_iswap",u"sqrt_iswap_inv",b"sqrt_iswap_inv",u"syc",b"syc",u"virtual_zpow",b"virtual_zpow",u"wait",b"wait"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"gate",b"gate"]) -> typing.Optional[typing_extensions.Literal["syc","sqrt_iswap","sqrt_iswap_inv","cz","phased_xz","virtual_zpow","physical_zpow","coupler_pulse","meas","wait"]]: ...
global___GateSpecification = GateSpecification

class GateSet(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    VALID_GATES_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the gate set corresponding to Language.gate_set"""

    @property
    def valid_gates(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GateDefinition]:
        """A list of valid gates permitted by this gate set"""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        valid_gates : typing.Optional[typing.Iterable[global___GateDefinition]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"name",b"name",u"valid_gates",b"valid_gates"]) -> None: ...
global___GateSet = GateSet

class GateDefinition(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ID_FIELD_NUMBER: builtins.int
    NUMBER_OF_QUBITS_FIELD_NUMBER: builtins.int
    VALID_ARGS_FIELD_NUMBER: builtins.int
    GATE_DURATION_PICOS_FIELD_NUMBER: builtins.int
    VALID_TARGETS_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    """The name for the gate.  This must match the Gate.id in your program."""

    number_of_qubits: builtins.int = ...
    """If unset or set to zero, any number of qubits is allowed."""

    @property
    def valid_args(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ArgDefinition]:
        """The name of the arguments that should be specified for
        an operation of this gate
        """
        pass
    gate_duration_picos: builtins.int = ...
    """This defines the approximate amount of time for each gate,
    specified as an integer number of picoseconds.
    """

    @property
    def valid_targets(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Valid targets that this gate can use.
        Values in this list correspond to the name of the TargetSet
        If unset, all combinations with number_of_qubits target are allowed.
        """
        pass
    def __init__(self,
        *,
        id : typing.Text = ...,
        number_of_qubits : builtins.int = ...,
        valid_args : typing.Optional[typing.Iterable[global___ArgDefinition]] = ...,
        gate_duration_picos : builtins.int = ...,
        valid_targets : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"gate_duration_picos",b"gate_duration_picos",u"id",b"id",u"number_of_qubits",b"number_of_qubits",u"valid_args",b"valid_args",u"valid_targets",b"valid_targets"]) -> None: ...
global___GateDefinition = GateDefinition

class ArgDefinition(google.protobuf.message.Message):
    """A description of an argument to an operation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class ArgType(_ArgType, metaclass=_ArgTypeEnumTypeWrapper):
        """Note: This should be kept in sync with the ArgValue proto"""
        pass
    class _ArgType:
        V = typing.NewType('V', builtins.int)
    class _ArgTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ArgType.V], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        UNSPECIFIED = ArgDefinition.ArgType.V(0)
        FLOAT = ArgDefinition.ArgType.V(1)
        REPEATED_BOOLEAN = ArgDefinition.ArgType.V(2)
        STRING = ArgDefinition.ArgType.V(3)

    UNSPECIFIED = ArgDefinition.ArgType.V(0)
    FLOAT = ArgDefinition.ArgType.V(1)
    REPEATED_BOOLEAN = ArgDefinition.ArgType.V(2)
    STRING = ArgDefinition.ArgType.V(3)

    NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    ALLOWED_RANGES_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the argument
    This corresponds to the valid key values for the
    map value of Operation.args
    """

    type: global___ArgDefinition.ArgType.V = ...
    """The type of the argument.
    This should correspond to the legal assignment
    of the Arg.arg oneof for this argument
    """

    @property
    def allowed_ranges(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ArgumentRange]:
        """This should only be populated for type FLOAT.
        If not set, all float values are allowed.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        type : global___ArgDefinition.ArgType.V = ...,
        allowed_ranges : typing.Optional[typing.Iterable[global___ArgumentRange]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"allowed_ranges",b"allowed_ranges",u"name",b"name",u"type",b"type"]) -> None: ...
global___ArgDefinition = ArgDefinition

class ArgumentRange(google.protobuf.message.Message):
    """Minimum value is inclusive and maximum value is exclusive.
    If minimum and maximum values are the same, only a single value is allowed.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    MINIMUM_VALUE_FIELD_NUMBER: builtins.int
    MAXIMUM_VALUE_FIELD_NUMBER: builtins.int
    minimum_value: builtins.float = ...
    maximum_value: builtins.float = ...
    def __init__(self,
        *,
        minimum_value : builtins.float = ...,
        maximum_value : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"maximum_value",b"maximum_value",u"minimum_value",b"minimum_value"]) -> None: ...
global___ArgumentRange = ArgumentRange

class TargetSet(google.protobuf.message.Message):
    """A list of targets that are valid for a set of gates.
    For instance, all qubit pairs that can be acted on by a 2-qubit gate
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class TargetOrdering(_TargetOrdering, metaclass=_TargetOrderingEnumTypeWrapper):
        pass
    class _TargetOrdering:
        V = typing.NewType('V', builtins.int)
    class _TargetOrderingEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TargetOrdering.V], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        UNSPECIFIED = TargetSet.TargetOrdering.V(0)
        SYMMETRIC = TargetSet.TargetOrdering.V(1)
        """Symmetric gates, any id order within each target is valid.
        Two-qubit gates can be applied to all two-element targets in a TargetSet
        of this type.
        """

        ASYMMETRIC = TargetSet.TargetOrdering.V(2)
        """Asymmetric gates, the order of ids in each target is important.
        Only the order specified in each target is valid.
        Deprecated: Unused
        """

        SUBSET_PERMUTATION = TargetSet.TargetOrdering.V(3)
        """All targets in this TargetSet should contain only a single qubit id.
        Gates using this TargetSet can be applied to any subset of these targets
        in any order.
        For example, this could be the case for measurement gates that can
        measure any subset of qubits at once.
        Deprecated: Measurement gate can be applied to all subset of qubits.
        """


    UNSPECIFIED = TargetSet.TargetOrdering.V(0)
    SYMMETRIC = TargetSet.TargetOrdering.V(1)
    """Symmetric gates, any id order within each target is valid.
    Two-qubit gates can be applied to all two-element targets in a TargetSet
    of this type.
    """

    ASYMMETRIC = TargetSet.TargetOrdering.V(2)
    """Asymmetric gates, the order of ids in each target is important.
    Only the order specified in each target is valid.
    Deprecated: Unused
    """

    SUBSET_PERMUTATION = TargetSet.TargetOrdering.V(3)
    """All targets in this TargetSet should contain only a single qubit id.
    Gates using this TargetSet can be applied to any subset of these targets
    in any order.
    For example, this could be the case for measurement gates that can
    measure any subset of qubits at once.
    Deprecated: Measurement gate can be applied to all subset of qubits.
    """


    NAME_FIELD_NUMBER: builtins.int
    TARGET_ORDERING_FIELD_NUMBER: builtins.int
    TARGETS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of the target list.
    This will be referenced in the GateDefinition to denote
    which targets are valid.
    """

    target_ordering: global___TargetSet.TargetOrdering.V = ...
    """The type of ordering of the ids within each target in this set.
    For instance, if the ids within each target are symmetric.
    """

    @property
    def targets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Target]:
        """A list of targets that are valid"""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        target_ordering : global___TargetSet.TargetOrdering.V = ...,
        targets : typing.Optional[typing.Iterable[global___Target]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"name",b"name",u"target_ordering",b"target_ordering",u"targets",b"targets"]) -> None: ...
global___TargetSet = TargetSet

class Target(google.protobuf.message.Message):
    """A description of a valid target of a multi-qubit gate operation
    For most Google devices, this will be a pair of qubit ids.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    IDS_FIELD_NUMBER: builtins.int
    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """A list of qubit ids that form a valid gate target."""
        pass
    def __init__(self,
        *,
        ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"ids",b"ids"]) -> None: ...
global___Target = Target
