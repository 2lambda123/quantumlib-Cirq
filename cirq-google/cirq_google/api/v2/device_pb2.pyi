"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

# This contains information about a device that includes the
# qubits on the device, supported gates, connections, and timing.
# This message specifies information that is needed when sending a
# Program message to the device.
class DeviceSpecification(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VALID_GATE_SETS_FIELD_NUMBER: builtins.int
    VALID_QUBITS_FIELD_NUMBER: builtins.int
    VALID_TARGETS_FIELD_NUMBER: builtins.int
    DEVELOPER_RECOMMENDATIONS_FIELD_NUMBER: builtins.int
    # A list of allowed gatesets for programs submitted to this processor
    # Language.gate_set should be one of these values to be valid.
    @property
    def valid_gate_sets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GateSet]: ...
    # A list of allowed ids for qubits within the Program.
    # Any programs with ids not in this list will be rejected.
    # If empty, all qubit values are allowed (e.g. in a simulator)
    @property
    def valid_qubits(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
    # A list of targets that gates can use.
    @property
    def valid_targets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TargetSet]: ...
    # Additional recommendations, caveats, and soft requirements that
    # are advice to users of the device, specified in English text
    # For instance, "All Z gates are converted to VirtualZ gates".
    developer_recommendations: typing.Text = ...
    def __init__(self,
        *,
        valid_gate_sets : typing.Optional[typing.Iterable[global___GateSet]] = ...,
        valid_qubits : typing.Optional[typing.Iterable[typing.Text]] = ...,
        valid_targets : typing.Optional[typing.Iterable[global___TargetSet]] = ...,
        developer_recommendations : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"developer_recommendations",b"developer_recommendations",u"valid_gate_sets",b"valid_gate_sets",u"valid_qubits",b"valid_qubits",u"valid_targets",b"valid_targets"]) -> None: ...
global___DeviceSpecification = DeviceSpecification

class GateSet(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    VALID_GATES_FIELD_NUMBER: builtins.int
    # The name of the gate set corresponding to Language.gate_set
    name: typing.Text = ...
    # A list of valid gates permitted by this gate set
    @property
    def valid_gates(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GateDefinition]: ...
    def __init__(self,
        *,
        name : typing.Text = ...,
        valid_gates : typing.Optional[typing.Iterable[global___GateDefinition]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"name",b"name",u"valid_gates",b"valid_gates"]) -> None: ...
global___GateSet = GateSet

class GateDefinition(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ID_FIELD_NUMBER: builtins.int
    NUMBER_OF_QUBITS_FIELD_NUMBER: builtins.int
    VALID_ARGS_FIELD_NUMBER: builtins.int
    GATE_DURATION_PICOS_FIELD_NUMBER: builtins.int
    VALID_TARGETS_FIELD_NUMBER: builtins.int
    # The name for the gate.  This must match the Gate.id in your program.
    id: typing.Text = ...
    # If unset or set to zero, any number of qubits is allowed.
    number_of_qubits: builtins.int = ...
    # The name of the arguments that should be specified for
    # an operation of this gate
    @property
    def valid_args(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ArgDefinition]: ...
    # This defines the approximate amount of time for each gate,
    # specified as an integer number of picoseconds.
    gate_duration_picos: builtins.int = ...
    # Valid targets that this gate can use.
    # Values in this list correspond to the name of the TargetSet
    # If unset, all combinations with number_of_qubits target are allowed.
    @property
    def valid_targets(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
    def __init__(self,
        *,
        id : typing.Text = ...,
        number_of_qubits : builtins.int = ...,
        valid_args : typing.Optional[typing.Iterable[global___ArgDefinition]] = ...,
        gate_duration_picos : builtins.int = ...,
        valid_targets : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"gate_duration_picos",b"gate_duration_picos",u"id",b"id",u"number_of_qubits",b"number_of_qubits",u"valid_args",b"valid_args",u"valid_targets",b"valid_targets"]) -> None: ...
global___GateDefinition = GateDefinition

# A description of an argument to an operation.
class ArgDefinition(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    # Note: This should be kept in sync with the ArgValue proto
    class ArgType(_ArgType, metaclass=_ArgTypeEnumTypeWrapper):
        pass
    class _ArgType:
        V = typing.NewType('V', builtins.int)
    class _ArgTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ArgType.V], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        UNSPECIFIED = ArgDefinition.ArgType.V(0)
        FLOAT = ArgDefinition.ArgType.V(1)
        REPEATED_BOOLEAN = ArgDefinition.ArgType.V(2)
        STRING = ArgDefinition.ArgType.V(3)

    UNSPECIFIED = ArgDefinition.ArgType.V(0)
    FLOAT = ArgDefinition.ArgType.V(1)
    REPEATED_BOOLEAN = ArgDefinition.ArgType.V(2)
    STRING = ArgDefinition.ArgType.V(3)

    NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    ALLOWED_RANGES_FIELD_NUMBER: builtins.int
    # The name of the argument
    # This corresponds to the valid key values for the
    # map value of Operation.args
    name: typing.Text = ...
    # The type of the argument.
    # This should correspond to the legal assignment
    # of the Arg.arg oneof for this argument
    type: global___ArgDefinition.ArgType.V = ...
    # This should only be populated for type FLOAT.
    # If not set, all float values are allowed.
    @property
    def allowed_ranges(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ArgumentRange]: ...
    def __init__(self,
        *,
        name : typing.Text = ...,
        type : global___ArgDefinition.ArgType.V = ...,
        allowed_ranges : typing.Optional[typing.Iterable[global___ArgumentRange]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"allowed_ranges",b"allowed_ranges",u"name",b"name",u"type",b"type"]) -> None: ...
global___ArgDefinition = ArgDefinition

# Minimum value is inclusive and maximum value is exclusive.
# If minimum and maximum values are the same, only a single value is allowed.
class ArgumentRange(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    MINIMUM_VALUE_FIELD_NUMBER: builtins.int
    MAXIMUM_VALUE_FIELD_NUMBER: builtins.int
    minimum_value: builtins.float = ...
    maximum_value: builtins.float = ...
    def __init__(self,
        *,
        minimum_value : builtins.float = ...,
        maximum_value : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"maximum_value",b"maximum_value",u"minimum_value",b"minimum_value"]) -> None: ...
global___ArgumentRange = ArgumentRange

# A list of targets that are valid for a set of gates.
# For instance, all qubit pairs that can be acted on by a 2-qubit gate
class TargetSet(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class TargetOrdering(_TargetOrdering, metaclass=_TargetOrderingEnumTypeWrapper):
        pass
    class _TargetOrdering:
        V = typing.NewType('V', builtins.int)
    class _TargetOrderingEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TargetOrdering.V], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        UNSPECIFIED = TargetSet.TargetOrdering.V(0)
        # Symmetric gates, any id order within each target is valid.
        SYMMETRIC = TargetSet.TargetOrdering.V(1)
        # Asymmetric gates, the order of ids in each target is important.
        # Only the order specified in each target is valid.
        ASYMMETRIC = TargetSet.TargetOrdering.V(2)
        # All targets in this TargetSet should contain only a single qubit id.
        # Gates using this TargetSet can be applied to any subset of these targets
        # in any order.
        # For example, this could be the case for measurement gates that can
        # measure any subset of qubits at once.
        SUBSET_PERMUTATION = TargetSet.TargetOrdering.V(3)

    UNSPECIFIED = TargetSet.TargetOrdering.V(0)
    # Symmetric gates, any id order within each target is valid.
    SYMMETRIC = TargetSet.TargetOrdering.V(1)
    # Asymmetric gates, the order of ids in each target is important.
    # Only the order specified in each target is valid.
    ASYMMETRIC = TargetSet.TargetOrdering.V(2)
    # All targets in this TargetSet should contain only a single qubit id.
    # Gates using this TargetSet can be applied to any subset of these targets
    # in any order.
    # For example, this could be the case for measurement gates that can
    # measure any subset of qubits at once.
    SUBSET_PERMUTATION = TargetSet.TargetOrdering.V(3)

    NAME_FIELD_NUMBER: builtins.int
    TARGET_ORDERING_FIELD_NUMBER: builtins.int
    TARGETS_FIELD_NUMBER: builtins.int
    # The name of the target list.
    # This will be referenced in the GateDefinition to denote
    # which targets are valid.
    name: typing.Text = ...
    # The type of ordering of the ids within each target in this set.
    # For instance, if the ids within each target are symmetric.
    target_ordering: global___TargetSet.TargetOrdering.V = ...
    # A list of targets that are valid
    @property
    def targets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Target]: ...
    def __init__(self,
        *,
        name : typing.Text = ...,
        target_ordering : global___TargetSet.TargetOrdering.V = ...,
        targets : typing.Optional[typing.Iterable[global___Target]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"name",b"name",u"target_ordering",b"target_ordering",u"targets",b"targets"]) -> None: ...
global___TargetSet = TargetSet

# A description of a valid target of a multi-qubit gate operation
# For most Google devices, this will be a pair of qubit ids.
class Target(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    IDS_FIELD_NUMBER: builtins.int
    # A list of qubit ids that form a valid gate target.
    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
    def __init__(self,
        *,
        ids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"ids",b"ids"]) -> None: ...
global___Target = Target
